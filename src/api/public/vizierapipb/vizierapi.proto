syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package pl.api.vizierpb;
option go_package = "pixielabs.ai/pixielabs/src/api/public/vizierapipb;publicvizierapipb";

// The list of data types supported by our execution engine.
enum DataType {
  DATA_TYPE_UNKNOWN = 0;
  BOOLEAN = 1;
  INT64 = 2;
  UINT128 = 3;
  FLOAT64 = 4;
  STRING = 5;
  TIME64NS = 6;
}

enum SemanticType {
  ST_UNSPECIFIED = 0;
  ST_NONE = 1;
  ST_TIME_NS = 2;
  ST_AGENT_UID = 100;
  ST_ASID = 101;
  ST_UPID = 200;
  ST_SERVICE_NAME = 300;
  ST_POD_NAME = 400;
  ST_POD_PHASE = 401;
  ST_POD_STATUS = 402;
  ST_NODE_NAME = 500;
  ST_CONTAINER_NAME = 600;
  ST_CONTAINER_STATE = 601;
  ST_CONTAINER_STATUS = 602;
  ST_NAMESPACE_NAME = 700;
  ST_BYTES = 800;
  ST_PERCENT = 900;
  ST_DURATION_NS = 901;
  ST_THROUGHPUT_PER_NS = 902;
  ST_THROUGHPUT_BYTES_PER_NS = 903;
  ST_QUANTILES = 1000;
  ST_DURATION_NS_QUANTILES = 1001;
  ST_IP_ADDRESS = 1100;
  ST_PORT = 1200;
  ST_HTTP_REQ_METHOD = 1300;
  ST_HTTP_RESP_STATUS = 1400;
  ST_HTTP_RESP_MESSAGE = 1500;
  ST_SCRIPT_REFERENCE = 3000;
}

message UInt128 {
  uint64 low = 1;
  uint64 high = 2;
}

// Boolean data column.
message BooleanColumn {
  repeated bool data = 1;
}

// Int64 column data.
message Int64Column {
  repeated int64 data = 1;
}

// Uint128 column data.
message UInt128Column {
  repeated UInt128 data = 1;
}

// Float64 column data.
message Float64Column {
  repeated double data = 1;
}

// Time64 column data.
message Time64NSColumn {
  repeated int64 data = 1;
}

// String data column.
message StringColumn {
  repeated string data = 1;
}

// A single column of data.
message Column {
  oneof col_data {
    BooleanColumn boolean_data = 1;
    Int64Column int64_data = 2;
    UInt128Column uint128_data = 3;
    Time64NSColumn time64ns_data = 4;
    Float64Column float64_data = 5;
    StringColumn string_data = 6;
  }
}

// RowBatchData is a temporary data type that will remove when proper serialization
// is implemented.
message RowBatchData {
  string table_id = 5 [ (gogoproto.customname) = "TableID" ]; // The ID of the table which the row batch belongs to.
  repeated Column cols = 1;
  int64 num_rows = 2;
  bool eow = 3;
  bool eos = 4;
}

message Relation {
  message ColumnInfo {
    string column_name = 1;
    DataType column_type = 2;
    string column_desc = 3;
    SemanticType column_semantic_type = 4;
  }
  repeated ColumnInfo columns = 1;
}

message CompilerError {
  uint64 line = 1;
  uint64 column = 2;
  string message = 3;
}

message ErrorDetails {
  oneof error {
    CompilerError compiler_error = 1;
  }
}

message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  int32 code = 1;

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2;

  // Reserved for deprecated Details.
  reserved 3;

  repeated ErrorDetails error_details = 4;
}

// This is a proto representation for common lifecycle states.
enum LifeCycleState {
  // State of the resource is unknown.
  UNKNOWN_STATE = 0;
  // Resource is still in the start up process.
  PENDING_STATE = 1;
  // Resource is active and healthy.
  RUNNING_STATE = 2;
  // Resource is not running and has failed.
  FAILED_STATE = 3;
  // Resource has been terminated with no errors.
  TERMINATED_STATE = 4;
}

// ScalarValues reference a single constant value.
message ScalarValue {
  // We need to store the type to handle the null case and make sure we have the
  // "correct" null value. This type takes precedence on the one of value below.
  // If they mismatch a null value will be used.
  DataType data_type = 1;
  oneof value {
    bool bool_value = 2;
    int64 int64_value = 3;
    double float64_value = 4;
    string string_value = 5;
    int64 time64_ns_value = 6;
    UInt128 uint128_value = 7;
  }
}

// ExecuteScriptRequest is the request for ExecuteQuery(). This
// should contain all necessary information to successfully run
// a script on Vizier.
message ExecuteScriptRequest {
  // query_str is the string representation of the query to run.
  string query_str = 1;

  // Old arg_values deprecated.
  reserved 2;

  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 3 [ (gogoproto.customname) = "ClusterID" ];

  // FuncToExecute specifies the name and arguments of a function to execute.
  message FuncToExecute {
    // Name of function to execute. Can be of the form 'func_name' or 'module_name.func_name'.
    string func_name = 1;
    message ArgValue {
      // name of the argument.
      string name = 1;
      // value of the argument as a string.
      // Compiler will attempt to parse the string as the type expected.
      // eg. a value of "1" for a function expecting an int would parse to 1,
      // but the same value for a function expecting a string would parse to "1".
      // In the future, we could also support parsing of expressions here, but
      // this would require doing something along the lines of "'string literal'" for string.
      string value = 2;
    }
    // arg_values are the arguments to the function. If arg_values do not match
    // the signature of the function, then the ExecuteScriptResponse will return
    // an error stating this issue. Arg_values will not match if
    //   1. arg_values misses any parameters to `func_name`
    //   2. arg_values adds parameters to `func_name`.
    //   3. the value in arg_value doesn't parse to the expected type.
    repeated ArgValue arg_values = 2;
    // output_table_prefix is the prefix of the name of the table that is returned in the response.
    // If the function returns a dataframe, then the table name will be `format("%s", output_table_prefix)`.
    // If the function returns a list of dataframes (even if the list is of length 1), then the table names will be
    // `format("%s[%d]", output_table_prefix, index)`.
    string output_table_prefix = 3;
  }
  // exec_funcs is a list of functions to execute.
  // If any functions specified cannot be found ExecuteScriptResponse will contain a compiler error
  repeated FuncToExecute exec_funcs = 4;

  // If set to true, the execute script will run the mutations (probe installs, etc.).
  // If unset, any mutation will be ignored.
  // If the mutated state is already ready, the script will also be executed.
  bool mutation = 5;
}

// Tracks information about query execution time.
message QueryTimingInfo {
  // The total execution time for the query in nanoseconds.
  int64 execution_time_ns = 1;
  // The time in ns spent compiling the query.
  int64 compilation_time_ns = 2;
}

// QueryExecutionStats contains information about the time/data processed by the query.
// These will be periodically streamed from the server as the query executes.
message QueryExecutionStats {
  QueryTimingInfo timing  = 1;
  // The number of input bytes.
  int64 bytes_processed = 2;
  // The number of input records.
  int64 records_processed = 3;
}

message QueryMetadata {
  Relation relation = 1;
  string name = 2;
  string id = 3 [ (gogoproto.customname) = "ID" ];
}
// The query results generated by carnot.
message QueryData {
  RowBatchData batch = 1;
  QueryExecutionStats execution_stats = 2;
}

message ExecuteScriptResponse {
  // The Status for executing the query. Empty status implies that execution was successful/is currently
  // running/the mutation is still not ready. An non-empty status may indicate a compiler error,
  // execution error, timeout, etc.
  Status status = 1;
  // The id for the query. UUID encoded as string.
  string query_id = 2 [ (gogoproto.customname) = "QueryID" ];

  oneof result {
    QueryData data = 3;
    QueryMetadata meta_data = 4;
  }

  // The status of the mutation, only populated if the request was a mutation.
  MutationInfo mutation_info = 5;
}

// Status information for a muation.
message MutationInfo {
  message MutationState {
    // ID of resource created/updated by the mutation.
    string id = 1 [ (gogoproto.customname) = "ID" ];
    // State of resource created/updated by the mutation.
    LifeCycleState state = 2;
    // The name of the resource created/updated by the mutation.
    string name = 3;
  }
  // The overall status of the mutation. An UNAVAILABLE status means that the querybroker is still
  // waiting for some mutations to complete before the query can actually be executed.
  Status status = 1;
  // The states of the resources created/updated by the mutation.
  repeated MutationState states = 2;
}

message HealthCheckRequest {
  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 1 [ (gogoproto.customname) = "ClusterID" ];;
}

message HealthCheckResponse {
  Status status = 1;
}


service VizierService {
  // This is an incoming request to Vizier to execute queries.
  rpc ExecuteScript(ExecuteScriptRequest) returns (stream ExecuteScriptResponse) {}
  rpc HealthCheck(HealthCheckRequest) returns (stream HealthCheckResponse) {}
}
